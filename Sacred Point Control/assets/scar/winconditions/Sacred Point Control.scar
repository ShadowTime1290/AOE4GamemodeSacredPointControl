-----------------------------------------------------------------------
-- Imported Scripts
-----------------------------------------------------------------------

-- Import Utility Scripts
import("cardinal.scar")							-- Contains sfx references, UI templates, and Civ/Age helper functions
import("ScarUtil.scar")							-- Contains game helper functions

-- Import Gameplay Systems
import("gameplay/score.scar")					-- Tracks player score
import("gameplay/diplomacy.scar")				-- Manages Tribute

-- Import Win Conditions
import("winconditions/annihilation.scar")		-- Support for eliminating a player when they can no longer fight or produce units
import("winconditions/elimination.scar")		-- Support for player quitting or dropping (through pause menu or disconnection)
import("winconditions/surrender.scar")			-- Support for player surrender (through pause menu)

-- Import UI Support
import("gameplay/chi/current_dynasty_ui.scar")	-- Displays Chinese Dynasty UI
import("gameplay/event_cues.scar")
import("gameplay/currentageui.scar")

-- Import Custom Scripts
import("sacredsites.scar")

import("helpers/EntityHelper.scar")

-----------------------------------------------------------------------
-- Data
-----------------------------------------------------------------------

-- Global data table that can be referenced in script functions (e.g. _mod.module = "Mod")
_mod = {
	module = "Mod",
	options = {}
}

-- Register the win condition (Some functions can be prepended with "Mod_" to be called automatically as part of the scripting framework)
Core_RegisterModule(_mod.module)

-----------------------------------------------------------------------
-- Scripting framework 
-----------------------------------------------------------------------

-- Called during load as part of the game setup sequence
function Mod_OnGameSetup()
	
	Setup_GetWinConditionOptions(_mod.options)
	
	if _mod.options.tickets then
		-- Fast drain
		if _mod.options.tickets.fast_drain.enum_value == _mod.options.tickets.fast_drain.enum_items.fast_drain_enabled then
			_religious.options.fast_drain = true
		else
			_religious.options.fast_drain = false
		end
		
		-- Starting tickets
		if _mod.options.tickets.starting_tickets.enum_value == 0 then--_mod.options.tickets.starting_tickets.enum_items.["800_tickets"] then
			_religious.options.tickets = 800
		elseif _mod.options.tickets.starting_tickets.enum_value == 1 then
			_religious.options.tickets = 1200
		elseif _mod.options.tickets.starting_tickets.enum_value == 2 then
			_religious.options.tickets = 1600
		elseif _mod.options.tickets.starting_tickets.enum_value == 3 then
			_religious.options.tickets = 2000
		elseif _mod.options.tickets.starting_tickets.enum_value == 4 then
			_religious.options.tickets = 2400
		elseif _mod.options.tickets.starting_tickets.enum_value == 5 then
			_religious.options.tickets = 2800
		elseif _mod.options.tickets.starting_tickets.enum_value == 6 then
			_religious.options.tickets = 3600
		end
		
		-- Ticket multi
		if _mod.options.tickets.ticket_multiplier.enum_value == 0 then--_mod.options.tickets.ticket_multiplier.enum_items.["2x_multiplier"] then
			_religious.options.ticket_multiplier = 1
		elseif _mod.options.tickets.ticket_multiplier.enum_value == 1 then
			_religious.options.ticket_multiplier = 2
		elseif _mod.options.tickets.ticket_multiplier.enum_value == 2 then
			_religious.options.ticket_multiplier = 3
		end
	end
	
end

-- Called before initialization, preceding other module OnInit functions
function Mod_PreInit()

	-- Enable Tribute UI
	Core_CallDelegateFunctions("TributeEnabled", true)

end

-- Called on match initialization before handing control to the player
function Mod_OnInit()

	for i, player in pairs(PLAYERS) do
		Player_SetStateModelFloat(player.id,"sacred_site_gold_income_per_second",0)
		Player_SetStateModelFloat(player.id,"relic_gold_income_per_second",0)
	end
end

-- Called after initialization is done when game is fading up from black
function Mod_Start()
	
	-- Set player to Age 4, Resources to 0 except gold at 1600 and population cap to 200
	for i, player in pairs(PLAYERS) do
		
		-- Set player starting Ages to Imperial
		-- Ages are mapped to: Dark Age = 1, Feudal Age = 2, Castle Age = 3, Imperial Age = 4
		Player_SetCurrentAge(player.id, 4)

		local player_civ = Player_GetRaceName(player.id)

		if player_civ == "chinese" then
			local dynasty1 = BP_GetUpgradeBlueprint("player_dynasty1_chi")
			local dynasty2 = BP_GetUpgradeBlueprint("player_dynasty2_chi")
			local dynasty3 = BP_GetUpgradeBlueprint("player_dynasty3_chi")
			Player_CompleteUpgrade(player.id, dynasty1)
			Player_SetStateModelBool(player.id,"dynasty_1_was_completed_chi",true)
			Player_CompleteUpgrade(player.id, dynasty2)
			Player_SetStateModelBool(player.id,"dynasty_2_was_completed_chi",true)
			Player_CompleteUpgrade(player.id, dynasty3)
			Player_SetStateModelBool(player.id,"dynasty_3_was_completed_chi",true)
		end
		
		-- Set player starting resources
		-- RT stands for Resource Type
		Player_SetResource(player.id, RT_Food, 0)		
		Player_SetResource(player.id, RT_Wood, 0)
		Player_SetResource(player.id, RT_Gold, _religious.options.tickets)
		Player_SetResource(player.id, RT_Stone, 0)
		
		-- Set starting population cap to 200
		Player_SetMaxPopulation(player.id, CT_Personnel, 50)

	end

	FOW_ExploreAll() 

	Mod_FindMonastery()

	Mod_CreateOutpostsAroundMonasteryForAllPlayers(40, 45)

	Mod_ConstructProductionAroundMonasteryForAllPlayers(20)

	Rule_AddInterval(SpawnProtection,0.1)

end

-- Called when Core_SetPlayerDefeated() is invoked. Signals that a player has been eliminated from play due to defeat.
function Mod_OnPlayerDefeated(player, reason)
	
	
	
end

-- When a victory condition is met, a module must call Core_OnGameOver() in order to invoke this delegate and notify all modules that the match is about to end. Generally used for clean up (removal of rules, objectives, and UI elements specific to the module).
function Mod_OnGameOver()
	
	
	
end

-- This function finds the starting Town Center for all players in the match, reveals it to all other players, and increases its production speed
function Mod_FindMonastery()

    for i, player in pairs(PLAYERS) do
        -- Get the player's entities and place them into an ENTITY GROUP
        local eg_player_entities = Player_GetEntities(player.id)
        
        -- Filter out everything in the ENTITY GROUP except for the Monastery
        EGroup_Filter(eg_player_entities, "monastery", FILTER_KEEP)
        
        -- Get the monastery ENTITY by getting the first entry in the ENTITY GROUP we just filtered
        local entity =  EGroup_GetEntityAt(eg_player_entities, 1)
        
        -- Get the monastery's ENTITY ID
        -- Some functions require the ENTITY ID to perform an action on the ENTITY
        local entity_id = Entity_GetID(entity) 
        
        -- Get the monastery's position
        local position = Entity_GetPosition(entity)
        
        -- Store the player's monastery information so it can be referenced later
        player.monastery = {
            entity = entity,
            entity_id = entity_id,
            position = position,
        }
        
        -- Reveal monastery locations for the first 30 seconds of the match
        FOW_RevealArea(player.monastery.position, 40, 30)
    end
end

function Mod_ConstructBuildingsInRadiusAroundPoint(buildingBps, centerpoint, radius)
    local num_buildings = #buildingBps

    for i = 1, num_buildings do
        local angle = math.rad((360 / num_buildings) * i)
        local x_offset = radius * math.cos(angle)
        local z_offset = radius * math.sin(angle)
        local position = {
            x = centerpoint.x + x_offset,
            z = centerpoint.z + z_offset
        }
        local blueprint = buildingBps[i]
        local scar_position = World_Pos(position.x, World_GetHeightAt(position.x, position.z), position.z)

        if blueprint then
            LocalCommand_PlayerPlaceAndConstructEntitiesPlanned(player.id, blueprint, scar_position, scar_position, false, false)
        end
    end
end

function Mod_CreateOutpostsAroundMonasteryForAllPlayers(radius, angle)
	for _, player in pairs(PLAYERS) do
		local outpost_blueprint = EH_GetCivilizationEntity(player.raceName, EH_BP_OUTPOST)
		local spawn_position = player.monastery.position
		Mod_CreateOutpostsAroundMonasterForPlayer(player, outpost_blueprint, spawn_position, radius, angle)
	end	
end

function Mod_CreateOutpostsAroundMonasterForPlayer(player, outpost_blueprint, center_position, radius, angle)
	local num_buildings = 360 / angle
	local positions = Mod_GetPositionsAroundPoint(num_buildings, center_position, radius)

	for i, position in pairs(positions) do
		local start_at = GetPositionWithOffset(center_position, position)
		LocalCommand_PlayerPlaceAndConstructEntitiesPlanned(player.id, outpost_blueprint, start_at, start_at, false, false)
	end

	local construct = function(gid, idx, eid)
		Entity_ForceSelfConstruct(eid)
	end

	local outposts = Player_GetEntitiesFromType(player.id, EH_BP_OUTPOST)
	EGroup_ForEach(outposts, construct)
end

function Mod_ConstructProductionAroundMonasteryForAllPlayers(radius)
	for _, player in pairs(PLAYERS) do
		local blueprints = {
            EH_GetCivilizationEntity(player.raceName, EH_BP_BARRACKS),
            EH_GetCivilizationEntity(player.raceName, EH_BP_ARCHERY_RANGE),
            EH_GetCivilizationEntity(player.raceName, EH_BP_STABLE),
            EH_GetCivilizationEntity(player.raceName, EH_BP_WORKSHOP),
            EH_GetCivilizationEntity(player.raceName, EH_BP_BLACKSMITH),
            EH_GetCivilizationEntity(player.raceName, EH_BP_KEEP)
        }

		local spawn_position = player.monastery.position
		Mod_ConstructProductionAroundPointForPlayer(player, blueprints, spawn_position, radius)
	end	
end

function Mod_ConstructProductionAroundPointForPlayer(player, buildingBps, centerpoint, radius)
	local num_buildings = #buildingBps

	local positions = Mod_GetPositionsAroundPoint(num_buildings, centerpoint, radius)

	for i, position in pairs(positions) do
		local blueprint = buildingBps[i]

		local start_at = GetPositionWithOffset(centerpoint, position)
		LocalCommand_PlayerPlaceAndConstructEntitiesPlanned(player.id, blueprint, start_at, start_at, false, false)
	end

	local construct = function(gid, idx, eid)
		Entity_ForceSelfConstruct(eid)
	end

	local buildings = Player_GetEntitiesFromType(player.id, EH_BP_BUILDING)
	EGroup_ForEach(buildings, construct)
end

function Mod_GetPositionsAroundPoint(num_positions, center_position, radius)
	local positions = {}

	local angle = 360 / num_positions

	for i = 1, num_positions do
		local position = GetPositionOnCircle(radius, i * angle)
		
		table.insert(positions, position)
	end

	return positions
end

function GetPositionWithOffset(center, offset)
	local x_str = center.x + offset.x
	local z_str = center.z + offset.z
	return World_Pos(x_str, World_GetHeightAt(x_str, z_str), z_str)
end

function GetPositionOnCircle(radius, degree)
	
	local position = {
		x = radius * math.cos(degree),
		z = radius * math.sin(degree)
	}
    
	return position
end

function SpawnProtection()
	for i, player in pairs(PLAYERS) do
		-- Create EGroups\SGroups for atspawn and nearspawn
		local eg_atspawn = EGroup_CreateIfNotFound("eg_atspawn")
		local eg_nearspawn = EGroup_CreateIfNotFound("eg_nearspawn")
		local sg_atspawn = SGroup_CreateIfNotFound("sg_atspawn")
		local sg_nearspawn = SGroup_CreateIfNotFound("sg_nearspawn")

		-- Get entities\squads near the markers and add them to the EGroups\SGroups
		Player_GetAllEntitiesNearMarker(player.id, eg_atspawn, player.monastery.position, 40)
		Player_GetAllEntitiesNearMarker(player.id, eg_nearspawn, player.monastery.position, 50)
		Player_GetAllSquadsNearMarker(player.id, sg_atspawn, player.monastery.position, 40)
		Player_GetAllSquadsNearMarker(player.id, sg_nearspawn, player.monastery.position, 50)

		-- Remove entities\squads from nearspawn that are in atspawn
		EGroup_RemoveGroup(eg_nearspawn, eg_atspawn)
		SGroup_RemoveGroup(sg_nearspawn, sg_atspawn)

		-- Set invulnerability for the entities in atspawn
		EGroup_SetInvulnerable(eg_atspawn, true)
		SGroup_SetInvulnerable(sg_atspawn, true)

		-- Remove invulnerability for the entities in nearspawn
		EGroup_SetInvulnerable(eg_nearspawn, false)
		SGroup_SetInvulnerable(sg_nearspawn, false)
	end
end

function BuildOutpostsAroundSpawn()

	

end